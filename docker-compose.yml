# Version: 3.8
# Description: Docker Compose file for a Python application with Kafka, Redis, MongoDB, Elasticsearch, Logstash, Kibana, Prometheus, and Grafana.
services:
  kafka:
    image: apache/kafka:4.0.0
    container_name: kafka
    ports:
      - '9092:9092'
    networks:
      - default
    environment:
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:19092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://kafka:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_HOST
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CLUSTER_ID: 'kraft-cluster'
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test:
        ['CMD', 'kafka-topics', '--bootstrap-server', 'kafka:9092', '--list']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis-server
    ports:
      - '6379:6379'
    networks:
      - default
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:latest
    container_name: mongo-db
    ports:
      - '27017:27017'
    networks:
      - default
    volumes:
      - mongo-data:/data/db
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'mongosh', '--quiet', '--eval', "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - '9200:9200'
    networks:
      - default
    volumes:
      - esdata:/usr/share/elasticsearch/data
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9200/_cluster/health']
      interval: 10s
      timeout: 5s
      retries: 5

  logstash:
    image: docker.elastic.co/logstash/logstash:8.12.0
    container_name: logstash
    ports:
      - '5000:5000'
    networks:
      - default
    environment:
      - LOG_LEVEL=info
      - PIPELINE_LOG_LEVEL=info
    restart: unless-stopped
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9600']
      interval: 10s
      timeout: 5s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.0
    container_name: kibana
    ports:
      - '5601:5601'
    networks:
      - default
    environment:
      ELASTICSEARCH_HOSTS: 'http://elasticsearch:9200'
    volumes:
      - kibana-storage:/usr/share/kibana/data
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:5601']
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - '9090:9090'
    networks:
      - default
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    restart: unless-stopped
    depends_on:
      logstash:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--spider',
          '--quiet',
          'http://localhost:9090/-/healthy',
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - '3000:3000'
    networks:
      - default
    volumes:
      - grafana-storage:/var/lib/grafana
    restart: unless-stopped
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 10s
      timeout: 5s
      retries: 5

  python-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: python-app
    networks:
      - default
    working_dir: /app
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      ENVIRONMENT: docker
      BOOTSTRAP_SERVERS: kafka:9092
      REDIS_HOST: redis
      MONGODB_URI: mongodb://mongo-db:27017
      ELASTICSEARCH_HOST: elasticsearch
      LOGSTASH_HOST: logstash
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      logstash:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/metrics']
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  kafka-data:
  redis-data:
  mongo-data:
  esdata:
  kibana-storage:
  grafana-storage:
  prometheus-data:

networks:
  default:
